spring:
  profiles:
    active: jonghyun
    include:
      - aws
      - credentials
  config:
    import:

---

spring:
  profiles:
    group:
      "jonghyun": "jonghyundb, common"
      "dev": "devdb,common"

---

spring:
  config:
    activate:
      on-profile: "devdb"
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://fever-final-testdb.cy76xlw8fwhe.ap-northeast-2.rds.amazonaws.com:3306/fever?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul
    username: fever
    password: fever2022

---

spring:
  config:
    activate:
      on-profile: "jonghyundb"
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/fever?useSSL=false&useUnicode=true&serverTimezone=Asia/Seoul
    username: root
    password: gm040404@

---

spring:
  jwt:
    header: Authorization
    # HS512 알고리즘을 사용할 것이기 때문에 512bit, 즉 64byte 이상의 secret key를 사용
    # echo 'jsh-springboot-and-jwt-tutorial-this-is-for-generating-jwt-secretkey-base64'|base64
    secret: anNoLXNwcmluZ2Jvb3QtYW5kLWp3dC10dXRvcmlhbC10aGlzLWlzLWZvci1nZW5lcmF0aW5nLWp3dC1zZWNyZXRrZXktYmFzZTY0Cg==
    token-validity-in-seconds: 86400
  security:
    oauth2:
      client:
        registration:
          kakao:
            client-id: 5e3755636ff2c2835946338bd7552ee3 # 카카오 디벨로퍼 REST API 키   클라이언트 ID
            redirect-uri: http://localhost:8081/test/signin #"{baseUrl}/{action}/oauth2/code/{registrationId}" # http://localhost:8080/login/oauth2/code/kakao
            client-authentication-method: POST
            authorization-grant-type: authorization_code
            scope: profile_nickname, profile_image, account_email
            client-name: Kakao
            provider:
              kakao:
                authorization_uri: https://kauth.kakao.com/oauth/authorize
                token_uri: https://kauth.kakao.com/oauth/token
                user-info-uri: https://kapi.kakao.com/v2/user/me
                user_name_attribute: id
  config:
    activate:
      on-profile: "common"
  servlet:
    multipart:
      max-file-size: 10000MB
      max-request-size: 10000MB
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto:  update #create
      use-new-id-generator-mappings: true
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
      org:
        hibernate:
          envers:
            audit_table_suffix: _history
            revision_field_name: rev_id
            store_data_at_delete: true
    database-platform: org.hibernate.dialect.MySQL8Dialect



---
  logging:
  level:
    com:
      amazonaws:
        util:
          EC2MetadataUtils: error